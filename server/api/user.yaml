paths:
   /register:
      post:
         tags:
            - user
         summary: Create user
         operationId: createUser
         requestBody:
            description: Created user object
            content:
               application/json:
                  schema:
                     $ref: "#/components/schemas/Register"
               application/xml:
                  schema:
                     $ref: "#/components/schemas/Register"
               application/x-www-form-urlencoded:
                  schema:
                     $ref: "#/components/schemas/Register"
         responses:
            "200":
               description: successful operation
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/Register"
                  application/xml:
                     schema:
                        $ref: "#/components/schemas/Register"
   /login:
      get:
         tags:
            - user
         summary: Logs user into the system
         operationId: loginUser
         requestBody:
            description: Login user object
            content:
               application/json:
                  schema:
                     $ref: "#/components/schemas/Login"
         responses:
            "200":
               description: successful operation
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/Login"
   /allusers/{id}:
      get:
         tags:
            - user
         summary: Get all users by id
         operationId: allusers
         requestBody:
            description: get all users
            content:
               application/json:
                  schema:
                     $ref: "#/components/schemas/AllUsers"
   /addmsg:
      post:
         tags: 
            - user
         operationId: addmsg
                
components:
   schemas:
      Register:
         type: object
         properties:
            username:
               type: string
               example: theUser
            email:
               type: string
               example: john@email.com
            password:
               type: string
               example: "$2b$10$5AeBJKDvQL97LdR9VrEyyuzARKi3bLdxg1kd4VzPR9uLV04HyNljG"
            isAvatarImageSet:
               type: boolean
               example: false
            avatarImage:
               type: string
               example: "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMC…"
            createdAt:
               type: string
               example: "2023-05-10T08:33:48.254+00:00"
         xml:
            name: user
      Login:
         type: object
         properties:
            username:
               type: string
               example: theUser
            password:
               type: string
               example: "$2b$10$5AeBJKDvQL97LdR9VrEyyuzARKi3bLdxg1kd4VzPR9uLV04HyNljG"
      AllUsers:
         type: object
         properties:
            _id:
               type: string
               example: 646db7e5437ffaae5f2680fc
            username:
               type: string
               example: theUser
            email:
               type: string
               example: john@email.com               
            avatarImage:
               type: string
               example: "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMC…"